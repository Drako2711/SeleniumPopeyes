{"name": "Agregar nueva dirección", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-018b7979=\"\" class=\"btn size2 line-orange\">...</button> is not clickable at point (495, 576). Other element would receive the click: <button type=\"button\" class=\"btn btn-lg\" data-v-7eb75687=\"\">...</button>\n  (Session info: headless chrome=99.0.4844.51)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00E29943+2595139]\n\tOrdinal0 [0x00DBC9F1+2148849]\n\tOrdinal0 [0x00CB4528+1066280]\n\tOrdinal0 [0x00CE7621+1275425]\n\tOrdinal0 [0x00CE5657+1267287]\n\tOrdinal0 [0x00CE333B+1258299]\n\tOrdinal0 [0x00CE207D+1253501]\n\tOrdinal0 [0x00CD7AB3+1211059]\n\tOrdinal0 [0x00CFB9EC+1358316]\n\tOrdinal0 [0x00CD7474+1209460]\n\tOrdinal0 [0x00CFBC04+1358852]\n\tOrdinal0 [0x00D0BAF2+1424114]\n\tOrdinal0 [0x00CFB806+1357830]\n\tOrdinal0 [0x00CD6086+1204358]\n\tOrdinal0 [0x00CD6F96+1208214]\n\tGetHandleVerifier [0x00FCB232+1658114]\n\tGetHandleVerifier [0x0108312C+2411516]\n\tGetHandleVerifier [0x00EBF261+560433]\n\tGetHandleVerifier [0x00EBE366+556598]\n\tOrdinal0 [0x00DC286B+2173035]\n\tOrdinal0 [0x00DC75F8+2192888]\n\tOrdinal0 [0x00DC76E5+2193125]\n\tOrdinal0 [0x00DD11FC+2232828]\n\tBaseThreadInitThunk [0x77B6FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77D27A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77D27A6E+238]", "trace": "self = <UnitTestPopeyes.Login.LoginAccount testMethod=test_04_login_add>\n\n    @allure.title(u\"Agregar nueva dirección\")\n    @allure.description(u\"Se requiere agregar una nueva dirección\")\n    @allure.story(u'Dirección')\n    def test_04_login_add(self):\n        self.test_02_login()\n        #Opcion 2: Delivery, Nueva dirección\n        with allure.step(u\"Seleccionamos nueva dirección\"):\n            elem = self.driver.find_element(By.XPATH,'//button[contains(text(),\"NUEVA DIRECCIÓN\")]')\n>           elem.click()\n\nLogin.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000254970D6C10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D27A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D27A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-018b7979=\"\" class=\"btn size2 line-orange\">...</button> is not clickable at point (495, 576). Other element would receive the click: <button type=\"button\" class=\"btn btn-lg\" data-v-7eb75687=\"\">...</button>\nE         (Session info: headless chrome=99.0.4844.51)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00E29943+2595139]\nE       \tOrdinal0 [0x00DBC9F1+2148849]\nE       \tOrdinal0 [0x00CB4528+1066280]\nE       \tOrdinal0 [0x00CE7621+1275425]\nE       \tOrdinal0 [0x00CE5657+1267287]\nE       \tOrdinal0 [0x00CE333B+1258299]\nE       \tOrdinal0 [0x00CE207D+1253501]\nE       \tOrdinal0 [0x00CD7AB3+1211059]\nE       \tOrdinal0 [0x00CFB9EC+1358316]\nE       \tOrdinal0 [0x00CD7474+1209460]\nE       \tOrdinal0 [0x00CFBC04+1358852]\nE       \tOrdinal0 [0x00D0BAF2+1424114]\nE       \tOrdinal0 [0x00CFB806+1357830]\nE       \tOrdinal0 [0x00CD6086+1204358]\nE       \tOrdinal0 [0x00CD6F96+1208214]\nE       \tGetHandleVerifier [0x00FCB232+1658114]\nE       \tGetHandleVerifier [0x0108312C+2411516]\nE       \tGetHandleVerifier [0x00EBF261+560433]\nE       \tGetHandleVerifier [0x00EBE366+556598]\nE       \tOrdinal0 [0x00DC286B+2173035]\nE       \tOrdinal0 [0x00DC75F8+2192888]\nE       \tOrdinal0 [0x00DC76E5+2193125]\nE       \tOrdinal0 [0x00DD11FC+2232828]\nE       \tBaseThreadInitThunk [0x77B6FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D27A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D27A6E+238]\n\nC:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "Se requiere agregar una nueva dirección", "steps": [{"name": "Iniciar el controlador de Chrome", "status": "passed", "start": 1646857483374, "stop": 1646857490640}, {"name": "Accedemos a la página de inicio de sesión", "status": "passed", "start": 1646857490640, "stop": 1646857494991}, {"name": "Ingresamos las credenciales de inicio de sesión con cuenta nativa", "status": "passed", "start": 1646857494991, "stop": 1646857495100}, {"name": "Validamos el inicio de sesión", "status": "passed", "start": 1646857495100, "stop": 1646857511891}, {"name": "Seleccionamos nueva dirección", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button data-v-018b7979=\"\" class=\"btn size2 line-orange\">...</button> is not clickable at point (495, 576). Other element would receive the click: <button type=\"button\" class=\"btn btn-lg\" data-v-7eb75687=\"\">...</button>\n  (Session info: headless chrome=99.0.4844.51)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00E29943+2595139]\n\tOrdinal0 [0x00DBC9F1+2148849]\n\tOrdinal0 [0x00CB4528+1066280]\n\tOrdinal0 [0x00CE7621+1275425]\n\tOrdinal0 [0x00CE5657+1267287]\n\tOrdinal0 [0x00CE333B+1258299]\n\tOrdinal0 [0x00CE207D+1253501]\n\tOrdinal0 [0x00CD7AB3+1211059]\n\tOrdinal0 [0x00CFB9EC+1358316]\n\tOrdinal0 [0x00CD7474+1209460]\n\tOrdinal0 [0x00CFBC04+1358852]\n\tOrdinal0 [0x00D0BAF2+1424114]\n\tOrdinal0 [0x00CFB806+1357830]\n\tOrdinal0 [0x00CD6086+1204358]\n\tOrdinal0 [0x00CD6F96+1208214]\n\tGetHandleVerifier [0x00FCB232+1658114]\n\tGetHandleVerifier [0x0108312C+2411516]\n\tGetHandleVerifier [0x00EBF261+560433]\n\tGetHandleVerifier [0x00EBE366+556598]\n\tOrdinal0 [0x00DC286B+2173035]\n\tOrdinal0 [0x00DC75F8+2192888]\n\tOrdinal0 [0x00DC76E5+2193125]\n\tOrdinal0 [0x00DD11FC+2232828]\n\tBaseThreadInitThunk [0x77B6FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77D27A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77D27A6E+238]\n\n", "trace": "  File \"D:\\PROYECTOS CICLO IX\\SELENIUM\\PopeyesPruebas\\UnitTestPopeyes\\Login.py\", line 193, in test_04_login_add\n    elem.click()\n  File \"C:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 710, in _execute\n    return self._parent.execute(command, params)\n  File \"C:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 424, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1646857511891, "stop": 1646857512962}], "attachments": [{"name": "log", "source": "e734a9b6-3430-4ae7-8800-990935672d0b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "902cddb3-4594-45fe-8171-00ca37e00dac-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "12019bb8-54fb-4e6d-a0e7-f2db16b9a627-attachment.txt", "type": "text/plain"}], "start": 1646857483374, "stop": 1646857514995, "uuid": "920e93d3-1d77-4d68-91ce-5ca3ed00836b", "historyId": "db248c9fd84a6a131c4a1cab5179f2ad", "testCaseId": "1a96fd3fa2d6e9569bd86ddf99c73518", "fullName": "Login.LoginAccount#test_04_login_add", "labels": [{"name": "story", "value": "Dirección"}, {"name": "feature", "value": "Log in"}, {"name": "suite", "value": "Login"}, {"name": "subSuite", "value": "LoginAccount"}, {"name": "host", "value": "DESKTOP-FT84D78"}, {"name": "thread", "value": "14000-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Login"}]}