{"name": "Pagar el producto del carrito con efectivo", "status": "failed", "statusDetails": {"message": "AssertionError: False is not true : Ocurrió un problema al dar click en finalizar compra", "trace": "self = <PurchaseProducts.Purchase testMethod=test_04_purchase_bag_cash>\n\n    @allure.title(u\"Pagar el producto del carrito con efectivo\")\n    @allure.description(u\"Se requiere pagar el producto que está en el carrito con un monto de 25 en efectivo\")\n    @allure.story(u'Compra de un producto')\n    def test_04_purchase_bag_cash(self):\n        self.test_03_purchase_product()\n        with allure.step(u\"Finalizamos la compra\"):\n            #Click en Finalizar tu compra\n            elem = self.driver.find_element(By.CSS_SELECTOR, \".btn.line-orange\")\n            elem.click()\n        with allure.step(u\"Elegimos el botón de pagar\"):\n            #Click en ir a Pagar\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".btn-pay\"))\n                WebDriverWait(self.driver, 15).until(element_present)\n                elem = self.driver.find_element(By.CSS_SELECTOR,'.btn-pay')\n                elem.click()\n            except TimeoutException:\n                self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.btn-pay'),'Ocurrió un problema al dar click en ir a pagar')\n        with allure.step(u\"Ingresamos el monto\"):\n            #Ingreso de monto para pago en efectivo\n            elem = self.driver.find_element(By.CSS_SELECTOR,\".icon-pay > input\")\n            elem.send_keys(\"50\")\n            #Seleccionar Acepto terminos y condiciones\n            elem = self.driver.find_element(By.ID, \"terminosCondiciones\")\n            elem.click()\n        with allure.step(u\"Finalizamos la compra\"):\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".onestepcheckout-button\"))\n                WebDriverWait(self.driver, 15).until(element_present)\n                elem = self.driver.find_element(By.CSS_SELECTOR,'.onestepcheckout-button')\n                elem.click()\n            except TimeoutException:\n                self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.onestepcheckout-button'),'Ocurrió un problema al dar click en finalizar compra')\n        with allure.step(u\"Validamos la compra exitosa\"):\n            #Validar mensaje\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".content-main > h1:nth-child(1)\"))\n>               WebDriverWait(self.driver, 15).until(element_present)\n\nPurchaseProducts.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b387851cb7d2b6befb18d1450774d481\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x00000213B7086670>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x010169A3+2582947]\nE       \tOrdinal0 [0x00FAA6D1+2139857]\nE       \tOrdinal0 [0x00EA3A98+1063576]\nE       \tOrdinal0 [0x00ECFF3E+1244990]\nE       \tOrdinal0 [0x00ED013B+1245499]\nE       \tOrdinal0 [0x00EF9F52+1417042]\nE       \tOrdinal0 [0x00EE8594+1344916]\nE       \tOrdinal0 [0x00EF834A+1409866]\nE       \tOrdinal0 [0x00EE8366+1344358]\nE       \tOrdinal0 [0x00EC5176+1200502]\nE       \tOrdinal0 [0x00EC6066+1204326]\nE       \tGetHandleVerifier [0x011BBE02+1675858]\nE       \tGetHandleVerifier [0x0127036C+2414524]\nE       \tGetHandleVerifier [0x010ABB01+560977]\nE       \tGetHandleVerifier [0x010AA8D3+556323]\nE       \tOrdinal0 [0x00FB020E+2163214]\nE       \tOrdinal0 [0x00FB5078+2183288]\nE       \tOrdinal0 [0x00FB51C0+2183616]\nE       \tOrdinal0 [0x00FBEE1C+2223644]\nE       \tBaseThreadInitThunk [0x7530FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F97A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76F97A6E+238]\n\nC:\\Users\\artur\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <PurchaseProducts.Purchase testMethod=test_04_purchase_bag_cash>\n\n    @allure.title(u\"Pagar el producto del carrito con efectivo\")\n    @allure.description(u\"Se requiere pagar el producto que está en el carrito con un monto de 25 en efectivo\")\n    @allure.story(u'Compra de un producto')\n    def test_04_purchase_bag_cash(self):\n        self.test_03_purchase_product()\n        with allure.step(u\"Finalizamos la compra\"):\n            #Click en Finalizar tu compra\n            elem = self.driver.find_element(By.CSS_SELECTOR, \".btn.line-orange\")\n            elem.click()\n        with allure.step(u\"Elegimos el botón de pagar\"):\n            #Click en ir a Pagar\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".btn-pay\"))\n                WebDriverWait(self.driver, 15).until(element_present)\n                elem = self.driver.find_element(By.CSS_SELECTOR,'.btn-pay')\n                elem.click()\n            except TimeoutException:\n                self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.btn-pay'),'Ocurrió un problema al dar click en ir a pagar')\n        with allure.step(u\"Ingresamos el monto\"):\n            #Ingreso de monto para pago en efectivo\n            elem = self.driver.find_element(By.CSS_SELECTOR,\".icon-pay > input\")\n            elem.send_keys(\"50\")\n            #Seleccionar Acepto terminos y condiciones\n            elem = self.driver.find_element(By.ID, \"terminosCondiciones\")\n            elem.click()\n        with allure.step(u\"Finalizamos la compra\"):\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".onestepcheckout-button\"))\n                WebDriverWait(self.driver, 15).until(element_present)\n                elem = self.driver.find_element(By.CSS_SELECTOR,'.onestepcheckout-button')\n                elem.click()\n            except TimeoutException:\n                self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.onestepcheckout-button'),'Ocurrió un problema al dar click en finalizar compra')\n        with allure.step(u\"Validamos la compra exitosa\"):\n            #Validar mensaje\n            try:\n                element_present = EC.element_to_be_clickable((By.CSS_SELECTOR, \".content-main > h1:nth-child(1)\"))\n                WebDriverWait(self.driver, 15).until(element_present)\n                self.screenshot(\"Compra exitosa\")\n                elem = self.driver.find_element(By.CSS_SELECTOR,'.content-main > h1:nth-child(1)')\n                self.assertEqual(elem.text,\"¡FELICIDADES !\",\"No se encontró el texto\")\n            except TimeoutException:\n>               self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.content-main > h1:nth-child(1)'),'Ocurrió un problema al dar click en finalizar compra')\nE               AssertionError: False is not true : Ocurrió un problema al dar click en finalizar compra\n\nPurchaseProducts.py:190: AssertionError"}, "description": "Se requiere pagar el producto que está en el carrito con un monto de 25 en efectivo", "steps": [{"name": "Iniciar el controlador de Chrome", "status": "passed", "start": 1646238595316, "stop": 1646238596453}, {"name": "Accedemos a la página de inicio de sesión", "status": "passed", "start": 1646238596453, "stop": 1646238600878}, {"name": "Ingresamos las credenciales de inicio de sesión con cuenta nativa", "status": "passed", "start": 1646238600878, "stop": 1646238601002}, {"name": "Validamos el inicio de sesión", "status": "passed", "start": 1646238601002, "stop": 1646238605664}, {"name": "Seleccionamos la primera dirección", "status": "passed", "start": 1646238605664, "stop": 1646238605699}, {"name": "Confirmamos la selección", "status": "passed", "start": 1646238605699, "stop": 1646238605734}, {"name": "Validamos la configuración de dirección", "status": "passed", "start": 1646238605734, "stop": 1646238607596}, {"name": "Nos dirigimos al home", "status": "passed", "start": 1646238607596, "stop": 1646238611309}, {"name": "Seleccionamos personales y para compartir", "status": "passed", "start": 1646238611309, "stop": 1646238611335}, {"name": "Seleccionamos el segundo producto (Cajun Full)", "status": "passed", "start": 1646238611335, "stop": 1646238612555}, {"name": "Eligimos las piezas", "status": "passed", "start": 1646238612555, "stop": 1646238614084}, {"name": "Elegimos el tamaño", "status": "passed", "start": 1646238614084, "stop": 1646238614098}, {"name": "Eligimos el sabor de bebida", "status": "passed", "start": 1646238614098, "stop": 1646238614116}, {"name": "Eligimos las salsas", "status": "passed", "start": 1646238614116, "stop": 1646238614166}, {"name": "Validamos el monto", "status": "passed", "start": 1646238614166, "stop": 1646238614181}, {"name": "Agregamos al carrito", "status": "passed", "start": 1646238614181, "stop": 1646238614202}, {"name": "Validamos que se agregó correctamente", "status": "passed", "start": 1646238614202, "stop": 1646238622645}, {"name": "Finalizamos la compra", "status": "passed", "start": 1646238622645, "stop": 1646238622686}, {"name": "Elegimos el botón de pagar", "status": "passed", "start": 1646238622686, "stop": 1646238628494}, {"name": "Ingresamos el monto", "status": "passed", "start": 1646238628494, "stop": 1646238629556}, {"name": "Finalizamos la compra", "status": "passed", "start": 1646238629556, "stop": 1646238635895}, {"name": "Validamos la compra exitosa", "status": "failed", "statusDetails": {"message": "AssertionError: False is not true : Ocurrió un problema al dar click en finalizar compra\n", "trace": "  File \"D:\\PROYECTOS CICLO IX\\SELENIUM\\PopeyesPruebas\\UnitTestPopeyes\\PurchaseProducts.py\", line 190, in test_04_purchase_bag_cash\n    self.assertTrue(self.is_element_present(By.CSS_SELECTOR,'.content-main > h1:nth-child(1)'),'Ocurrió un problema al dar click en finalizar compra')\n  File \"C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.9_3.9.2800.0_x64__qbz5n2kfra8p0\\lib\\unittest\\case.py\", line 688, in assertTrue\n    raise self.failureException(msg)\n"}, "start": 1646238635895, "stop": 1646238666433}], "start": 1646238595316, "stop": 1646238668522, "uuid": "18662c3b-e855-400b-a40b-3f080fee0db7", "historyId": "a88202527f7077c4e5a0badbabb1a7c8", "testCaseId": "b90e20f100165c506c3482d3d5353a6f", "fullName": "PurchaseProducts.Purchase#test_04_purchase_bag_cash", "labels": [{"name": "feature", "value": "Purchase"}, {"name": "story", "value": "Compra de un producto"}, {"name": "suite", "value": "PurchaseProducts"}, {"name": "subSuite", "value": "Purchase"}, {"name": "host", "value": "DESKTOP-FT84D78"}, {"name": "thread", "value": "42408-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PurchaseProducts"}]}